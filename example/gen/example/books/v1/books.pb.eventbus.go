// Code generated by protoc-gen-go-eventbus. DO NOT EDIT.
// versions:
// - protoc-gen-go-eventbus v1.0.0
// - protoc                 v3.17.3
// source: books.proto

package books

import (
	context "context"
	event "github.com/quarks-tech/protoevent-go/pkg/event"
	eventbus "github.com/quarks-tech/protoevent-go/pkg/eventbus"
)

type EventPublisher interface {
	PublishBookCreatedEvent(ctx context.Context, e *BookCreatedEvent, opts ...eventbus.PublishOption) error
	PublishBookUpdatedEvent(ctx context.Context, e *BookUpdatedEvent, opts ...eventbus.PublishOption) error
	PublishBookDeletedEvent(ctx context.Context, e *BookDeletedEvent, opts ...eventbus.PublishOption) error
}

type eventPublisher struct {
	pp eventbus.Publisher
}

func NewEventPublisher(pp eventbus.Publisher) EventPublisher {
	return &eventPublisher{pp}
}

func (p *eventPublisher) PublishBookCreatedEvent(ctx context.Context, e *BookCreatedEvent, opts ...eventbus.PublishOption) error {
	return p.pp.Publish(ctx, "example.books.v1.BookCreated", e, opts...)
}

func (p *eventPublisher) PublishBookUpdatedEvent(ctx context.Context, e *BookUpdatedEvent, opts ...eventbus.PublishOption) error {
	return p.pp.Publish(ctx, "example.books.v1.BookUpdated", e, opts...)
}

func (p *eventPublisher) PublishBookDeletedEvent(ctx context.Context, e *BookDeletedEvent, opts ...eventbus.PublishOption) error {
	return p.pp.Publish(ctx, "example.books.v1.BookDeleted", e, opts...)
}

type BookCreatedEventHandler interface {
	HandleBookCreatedEvent(ctx context.Context, e *BookCreatedEvent) error
}

type BookUpdatedEventHandler interface {
	HandleBookUpdatedEvent(ctx context.Context, e *BookUpdatedEvent) error
}

type BookDeletedEventHandler interface {
	HandleBookDeletedEvent(ctx context.Context, e *BookDeletedEvent) error
}

func RegisterBookCreatedEventHandler(r eventbus.EventHandlerRegistrar, h BookCreatedEventHandler) {
	r.RegisterEventHandler(&EventbusServiceDesc, "BookCreated", h)
}

func RegisterBookUpdatedEventHandler(r eventbus.EventHandlerRegistrar, h BookUpdatedEventHandler) {
	r.RegisterEventHandler(&EventbusServiceDesc, "BookUpdated", h)
}

func RegisterBookDeletedEventHandler(r eventbus.EventHandlerRegistrar, h BookDeletedEventHandler) {
	r.RegisterEventHandler(&EventbusServiceDesc, "BookDeleted", h)
}

func _BookCreatedEvent_Handler(h interface{}, md *event.Metadata, ctx context.Context, dec func(interface{}) error, interceptor eventbus.SubscriberInterceptor) error {
	e := new(BookCreatedEvent)
	if err := dec(e); err != nil {
		return err
	}
	if interceptor == nil {
		return h.(BookCreatedEventHandler).HandleBookCreatedEvent(ctx, e)
	}
	handler := func(ctx context.Context, e interface{}) error {
		return h.(BookCreatedEventHandler).HandleBookCreatedEvent(ctx, e.(*BookCreatedEvent))
	}
	return interceptor(ctx, md, e, handler)
}

func _BookUpdatedEvent_Handler(h interface{}, md *event.Metadata, ctx context.Context, dec func(interface{}) error, interceptor eventbus.SubscriberInterceptor) error {
	e := new(BookUpdatedEvent)
	if err := dec(e); err != nil {
		return err
	}
	if interceptor == nil {
		return h.(BookUpdatedEventHandler).HandleBookUpdatedEvent(ctx, e)
	}
	handler := func(ctx context.Context, e interface{}) error {
		return h.(BookUpdatedEventHandler).HandleBookUpdatedEvent(ctx, e.(*BookUpdatedEvent))
	}
	return interceptor(ctx, md, e, handler)
}

func _BookDeletedEvent_Handler(h interface{}, md *event.Metadata, ctx context.Context, dec func(interface{}) error, interceptor eventbus.SubscriberInterceptor) error {
	e := new(BookDeletedEvent)
	if err := dec(e); err != nil {
		return err
	}
	if interceptor == nil {
		return h.(BookDeletedEventHandler).HandleBookDeletedEvent(ctx, e)
	}
	handler := func(ctx context.Context, e interface{}) error {
		return h.(BookDeletedEventHandler).HandleBookDeletedEvent(ctx, e.(*BookDeletedEvent))
	}
	return interceptor(ctx, md, e, handler)
}

var EventbusServiceDesc = eventbus.ServiceDesc{
	ServiceName: "example.books.v1",
	Events: []eventbus.EventDesc{
		{
			Name:        "BookCreated",
			HandlerType: (*BookCreatedEventHandler)(nil),
			Handler:     _BookCreatedEvent_Handler,
		},
		{
			Name:        "BookUpdated",
			HandlerType: (*BookUpdatedEventHandler)(nil),
			Handler:     _BookUpdatedEvent_Handler,
		},
		{
			Name:        "BookDeleted",
			HandlerType: (*BookDeletedEventHandler)(nil),
			Handler:     _BookDeletedEvent_Handler,
		},
	},
	Metadata: "books.proto",
}
